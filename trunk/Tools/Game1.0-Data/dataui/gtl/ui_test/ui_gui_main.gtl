VERSION 3;
ID 0;
ATTRIBUTE 128;
NAME "ui_gui_main";
DESCRIPTION "测试界面"; 

#include "../core/gui/guiInclude.h"

#define RES_UI_SCROOLBAR_TOP 													25
#define RES_UI_SCROOLBAR_BOTTOM  												26

DATA{
	GVMCanvasUnit vmCU;
	GListBox listbox;
	GButton[] button;

	ImageSet res_ui;	
	int screenHeight;
	int screenWidth;
}

FUNCTION init(){
	res_ui = Realize(ImageSet_Create("ui_res.pip", TRUE));
	screenHeight = GetScreenHeight();
	screenWidth = GetScreenWidth();
	
	create_canvasUnit();
	
	listbox = Realize(GLB_makeGListBox(NULL, "listbox", screenWidth, screenHeight,LAYOUT_ORIENT_VERTICAL,LAYOUT_ALIGN_VBOTTOM,TRUE,FALSE));
	GW_setBorderSize(listbox, 2, 2, 2, 2);
	GC_addChildWidget(vmCU, listbox, 0);
	GW_SetVisible(listbox.scrollPanel.vScrollBar, FALSE);
	GW_SetVisible(listbox.scrollPanel.upArrow, FALSE);
	GW_SetVisible(listbox.scrollPanel.downArrow, FALSE);
	listbox.scrollPanel.vScrollBar.func_paint = paintCScrollBar;
	listbox.backgroundColor = 0xFF353d9a;
	listbox.isBackgroundPainted = TRUE;
	listbox.isBorderPainted = TRUE;
	listbox.borderColor = 0xFF3F322F;
	
	listbox.func_handleKey = GWnd_handlKey;
	GLB_setBound(listbox, 50, 50, 140, 220);
	
	int size = 14;
	button = new GButton[size];
	String tmpStr= new String[size];
	tmpStr[0] = "LineLayout";
	tmpStr[1] = "BorderLayout";
	tmpStr[2] = "GridLayout";
	tmpStr[3] = "GridBagLayout";
	tmpStr[4] = "GRadioButton";
	tmpStr[5] = "GGridBox";
	tmpStr[6] = "GMessageBox";
	tmpStr[7] = "GTreeView";
	tmpStr[8] = "GIcon";
	tmpStr[9] = "GImageNumber";
	tmpStr[10] = "GProgressBar";
	tmpStr[11] = "GSlider";
	tmpStr[12] = "GTextBox";
	tmpStr[13] = "GCheckBox";
	for (int i = 0; i < size; i++)	{
		button[i] = GBtn_makeGButton(NULL, "GButton", tmpStr[i], NULL, -1, 0);
		initBtn(button[i]);
		GLB_addItem(listbox, button[i]);
	}
	GLB_update(listbox);
	GW_requestFocus(button[0]);
	button[0].btn_clicked = btn_line_layout;
	button[1].btn_clicked = btn_border_layout;
	button[2].btn_clicked = btn_grid_layout;
	button[3].btn_clicked = btn_gridBag_layout;
	button[4].btn_clicked = btn_radiobutton;
	button[5].btn_clicked = btn_gridbox;
	button[6].btn_clicked = btn_messagebox;
	button[7].btn_clicked = btn_trees;
	button[8].btn_clicked = btn_icon;
	button[9].btn_clicked = btn_imageNumber;
	button[10].btn_clicked = btn_progressBar;
	button[11].btn_clicked = btn_slider;
	button[12].btn_clicked = btn_textbox;
	button[13].btn_clicked = btn_checkbox;
	
	for(i = 0; i < size; i++)
	{
		free tmpStr[i];
	}
}

FUNCTION btn_line_layout(GButton btn)
{
	GW_requestFocus(btn);
	CloseUI();
	int toLine = OpenUI("ui_gui_line");
	return TRUE;
}
FUNCTION btn_border_layout(GButton btn)
{
	GW_requestFocus(btn);
	CloseUI();
	int toLine = OpenUI("ui_gui_border");
	return TRUE;
}
FUNCTION btn_grid_layout(GButton btn)
{
	GW_requestFocus(btn);
	CloseUI();
	int toLine = OpenUI("ui_gui_grid");
	return TRUE;
}
FUNCTION btn_gridBag_layout(GButton btn)
{
	GW_requestFocus(btn);
	CloseUI();
	int toLine = OpenUI("ui_gui_gridbag");
	return TRUE;
}
FUNCTION btn_radiobutton(GButton btn)
{
	GW_requestFocus(btn);
	CloseUI();
	int toLine = OpenUI("ui_gui_radiobutton");
	return TRUE;
}
FUNCTION btn_gridbox(GButton btn)
{
	GW_requestFocus(btn);
	CloseUI();
	int toLine = OpenUI("ui_gui_gridbox");
	return TRUE;
}
FUNCTION btn_messagebox(GButton btn)
{
	GW_requestFocus(btn);
	CloseUI();
	int toLine = OpenUI("ui_gui_messagebox");
	return TRUE;
}
FUNCTION btn_trees(GButton btn)
{
	GW_requestFocus(btn);
	CloseUI();
	int toLine = OpenUI("ui_gui_trees");
	return TRUE;
}
FUNCTION btn_icon(GButton btn)
{
	GW_requestFocus(btn);
	CloseUI();
	int toLine = OpenUI("ui_gui_icon");
	return TRUE;
}
FUNCTION btn_imageNumber(GButton btn)
{
	GW_requestFocus(btn);
	CloseUI();
	int toLine = OpenUI("ui_gui_imageNumber");
	return TRUE;
}
FUNCTION btn_progressBar(GButton btn)
{
	GW_requestFocus(btn);
	CloseUI();
	int toLine = OpenUI("ui_gui_progressBar");
	return TRUE;
}
FUNCTION btn_slider(GButton btn)
{
	GW_requestFocus(btn);
	CloseUI();
	int toLine = OpenUI("ui_gui_slider");
	return TRUE;
}
FUNCTION btn_textbox(GButton btn)
{
	GW_requestFocus(btn);
	CloseUI();
	int toLine = OpenUI("ui_gui_textbox");
	return TRUE;
}
FUNCTION btn_checkbox(GButton btn)
{
	GW_requestFocus(btn);
	CloseUI();
	int toLine = OpenUI("ui_gui_checkbox");
	return TRUE;
}

FUNCTION destroy(){
	free listbox;
	free button;
	free vmCU;
	
	free res_ui;

	
	free NULL;
}

FUNCTION paintCScrollBar(GButton this){
	Object g = Realize(GetSystemGraphics());
	int[] oldClip = GetClip(g);	
	int[] _widgetClip = GW_getWidgetClipArea(this);
	SetClip(g, _widgetClip[0], _widgetClip[1], _widgetClip[2], _widgetClip[3]);	
	int arrowH = 2;
	ImageSet_DrawFrame2(res_ui, g, RES_UI_SCROOLBAR_TOP, _widgetClip[0], _widgetClip[1], TRANS_NONE, G_TOPLEFT);
	DrawSpellCol(g, _widgetClip[0] + 1, _widgetClip[1] + 2, _widgetClip[3] - arrowH - arrowH, res_ui, RES_UI_SCROOLBAR_BOTTOM, TRANS_NONE);
	ImageSet_DrawFrame2(res_ui, g, RES_UI_SCROOLBAR_TOP, _widgetClip[0], _widgetClip[1] + _widgetClip[3] - arrowH, TRANS_ROT180, G_TOPLEFT);
	SetClip(g, oldClip[0], oldClip[1], oldClip[2], oldClip[3]);
	free oldClip;
	free _widgetClip;
	free g;
}

FUNCTION create_canvasUnit(){
	String cuName = Realize(Object_Create("Canvas_Unit"));
	vmCU = Realize(GVMCU_MakeGVMCU(NULL,cuName));
	free cuName;

	GW_setBound(vmCU, 0, 0, screenWidth, screenHeight);
	vmCU.isBackgroundPainted = TRUE;
	vmCU.backgroundColor = 0xff897500;
}

FUNCTION initBtn(GButton this){
	GW_setBorderSize(this, 2, 2, 2, 2);
	this.isBorderPainted = TRUE;
	this.borderColor = 0x757575;
	this.isSelectionPainted = TRUE;
	this.selectionColor = 0xff0000;
	this.isBackgroundPainted = TRUE;
	this.backgroundColor = 0xffffff;
}

// 窗口的按键事件处理
FUNCTION GWnd_handlKey(GWindow this, int eventType, int keyCode, int modifierCode){
 	boolean eventComsumed = FALSE;
 	switch(eventType){
 		case EVENT_TYPE_KEYPRESSED:
 			break;
		case EVENT_TYPE_KEYRELEASED:
			// 定义okay和数字5键触发点击事件.
			switch(keyCode){
				case SOFT_FIRST_PRESSED:
					break;
				case SOFT_LAST_PRESSED:
					CloseUI();
					int toMain = OpenUI("ui_gui");
					eventComsumed = TRUE;
					break;
				default:
					break;
			}
			break;
		default:
			break;
 	}
 	return eventComsumed;
}

FUNCTION event() {}

FUNCTION cycle(){}

FUNCTION cycleUI(){}

FUNCTION paint(){}

FUNCTION processPacket(){}