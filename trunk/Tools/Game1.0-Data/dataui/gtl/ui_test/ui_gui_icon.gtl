VERSION 3;
ID 0;
ATTRIBUTE 128;
NAME "ui_gui_icon";
DESCRIPTION "icon测试界面"; 

#include "../core/gui/guiInclude.h"

DATA
{
	GVMCanvasUnit vmCU;
	GContainer container;
	GIcon icon;	
	ImageSet iconRes;
}

FUNCTION init()
{
	iconRes = Realize(ImageSet_Create("menu_2.pip", TRUE));
	//iconRes = Realize(ImageSet_Create("ui_res240.pip"));
	// 创建canvasUnit以及一个container.
	create_canvasUnit();
	
	// 创建一个label
	test_icon();
}

FUNCTION cycle()
{
}

FUNCTION cycleUI()
{
}

FUNCTION paint()
{
}

FUNCTION destroy()
{
	free vmCU;
	free container;
	free icon;
	free iconRes;
}

FUNCTION processPacket()
{
	return FALSE;
}

FUNCTION event()
{
}

FUNCTION create_canvasUnit()
{
	// 创建一个canvasUnit, 它是脚本界面的最基本组织形式, 每个界面window必须
	// 有一个canvasUnit.
	String cuName = Realize(Object_Create("Canvas_Unit"));
	vmCU = Realize(GVMCU_MakeGVMCU(NULL, cuName));
	// 创建一个container.
	String containerName = Realize(Object_Create("Container"));
	container = Realize(GC_makeGContainer(NULL, containerName));
	free cuName;
	free containerName;
	
	GW_setBound(vmCU, 0, 0, 240, 320);
	
	GW_setBound(container, 0, 0, 240, 320);
	GC_addChildWidget(vmCU, container, 0);
	
	container.backgroundColor = 0xe9daaf;			//设置container的背景色
	container.isBackgroundPainted = TRUE;
}

/*
 *label可以显示一个简单文字，不显示图片，没有文字时画X
 */
FUNCTION test_icon()
{
	String iconName = Realize(Object_Create("iconName"));					//icon的名字
	icon = Realize(GI_makeGIcon(NULL, iconName, iconRes, 2));
	
	free iconName;															//释放分配的内存

	GC_addChildWidget(container, icon, 0);									//将icon加入container
	GW_setBound(icon, 50, 50, 150, 150);								    //设置icon的坐标宽高
	container.func_handleKey = click_handle;
	Gui_GW_RequestFocus(container);
}

FUNCTION click_handle(GWidget this, int eventType, int keyCode, int modifierCode)
{
	boolean eventComsumed = FALSE;
	
	if (eventType == EVENT_TYPE_KEYRELEASED && keyCode == SOFT_LAST_PRESSED)
	{
		CloseUI();
		int textboxToMain = OpenUI("ui_gui_main");
		eventComsumed = TRUE;
	}
	return eventComsumed;
}

