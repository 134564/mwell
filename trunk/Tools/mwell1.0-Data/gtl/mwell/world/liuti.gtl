VERSION 3;
ID 0;
ATTRIBUTE 128;
NAME "game_world";
DESCRIPTION "游戏控制器"; 

#include "../common/generalEx.gtl"

STRUCT Material {
	int m;
    int rd;
    int k;
    int v;
    int d;
    int g;
}

STRUCT Particle {
	Material mat;
    int x;
    int y;
    int u;
    int v;
 
    int dudx;// = 0;
    int dudy;// = 0;
    int dvdx;// = 0;
    int dvdy;// = 0;
    int cx;// = 0;
    int cy;// = 0;
 
    int[] px;// = [0,0,0];
    int[] py;// = [0,0,0];
    int[] gx;// = [0,0,0];
    int[] gy;// = [0,0,0];
}

STRUCT Node
{
    int m;// = 0;
    int d;// = 0;
    int gx;// = 0;
    int gy;// = 0;
    int u;// = 0;
    int v;// = 0;
    int ax;// = 0;
    int ay;// = 0;
    boolean active;// = FALSE; 
}
STRUCT Nodes {
	Node[] nodeArray;
}
STRUCT Liquid{
	Particle[] particles;
 
    int gsizeX;// = gsizeX;
    int gsizeY;// = gsizeY;
 
    Nodes[] grid;// = [[]]; //Nodes
    Node[] active;// = []; //Nodes
    Material water;// = new Material(1, 1, 1, 1, 1, 1);
    boolean pressed;// = FALSE;
    boolean pressedprev;// = FALSE;
 
    int mx;// = 0;
    int my;// = 0;
    int mxprev;// = 0;
    int myprev;// = 0; 
}

DATA {
	Liquid liquid;
	int gsizeX;
	int gsizeY;
	int particlesX;
	int particlesY;
}

FUNCTION init() {
	liquid = Realize(new Liquid);
	gsizeX = 10; 
	gsizeY = 10; 
	particlesX = 5; 
	particlesY = 5;
	
	Liquid_init(); 
}
FUNCTION event(){
}
FUNCTION cycle(){
	Liquid_simulate();
}

FUNCTION cycleUI(){ 	
} 

FUNCTION processPacket() {
}

FUNCTION destroy(){
}

FUNCTION paint() {
	Object g = Realize(GetSystemGraphics());
	SetColor(g, 0);
	
	//画背景，填充矩形
	FillRect(g, 0, 0, GetScreenWidth(), GetScreenHeight());
	SetColor(g, 0xffffff);
	Liquid_paint(g);
	free g;
}

FUNCTION Liquid_init() {
	liquid.particles = new Particle[particlesX * particlesY]; 
	liquid.gsizeX = gsizeX;
    liquid.gsizeY = gsizeY;
 
    liquid.grid = new Nodes[gsizeX]; //Nodes
    liquid.active = new Nodes[particlesX * particlesY * 3 * 3]; //Nodes
    liquid.water = Realize(new Material);
    liquid.water.d = 1;
    liquid.water.g = 1;
    liquid.water.k = 1;
    liquid.water.m = 1;
    liquid.water.rd = 1;
    liquid.water.v = 1;

    liquid.pressed = FALSE;
    liquid.pressedprev = FALSE;
 
    liquid.mx = 0;
    liquid.my = 0;
    liquid.mxprev = 0;
    liquid.myprev = 0;
    
    
    int i = 0;
    int j = 0;
        //grid初始化 
        for (i = 0; i < liquid.gsizeX; i++)
        {
            liquid.grid[i] = Realize(new Nodes); 
            liquid.grid[i].nodeArray = new Node[gsizeY];
            for (j = 0; j < liquid.gsizeY; j++)
            {
                liquid.grid[i].nodeArray[j] = Realize(new Node);
            }
        }
 
        int p = 0;
        for (i = 0; i < particlesX; i++) {
            for (j = 0; j < particlesY; j++)
            {
            	
                liquid.particles[p] = Realize(new Particle);
                liquid.particles[p].mat = liquid.water;
                liquid.particles[p].x = i + 4;
                liquid.particles[p].y = j + 4; 
                liquid.particles[p].u = 0;
                liquid.particles[p].v = 0; 
                liquid.particles[p].gx = new int[3];
                liquid.particles[p].gy = new int[3];
                liquid.particles[p].px = new int[3];
                liquid.particles[p].py = new int[3];
                
                p++;
            }
		} 
}

FUNCTION Liquid_paint(Object g) {	
	 for (int i = 0; i < particlesX * particlesY; i++) {
            Particle p = liquid.particles[i];
            DrawLine(g, 4 * p.x, 4 * p.y,
                 		4 * (p.x - p.u), 4 * (p.y - p.v));
     }
}

FUNCTION Liquid_simulate() {
		boolean drag = FALSE;
        int mdx = 0;
        int mdy = 0;
 
        if (liquid.pressed && liquid.pressedprev)
        {
            drag = TRUE;
            mdx = (liquid.mx - liquid.mxprev);
            mdy = (liquid.my - liquid.myprev);
        }
 
        liquid.pressedprev = liquid.pressed;
        liquid.mxprev = liquid.mx;
        liquid.myprev = liquid.my;
 		//清理活动粒子
 		int activeLength = Length(liquid.active);
        for (int i = 0; i < activeLength; i++) {
        	 
        	liquid.active[i] = Realize(new Node);
        	     
        } 
 		 
 		Node n;
        int j;
        int x;
        int y;
        int phi;
        int fx = 0;
        int fy = 0;
        int particleLength = Length(liquid.particles);
        int activeNodeIndex = 0;
        for (int k = 0; k < particleLength; k++)//计算粒子的 cx, cy, px[1,2,3], gx[1,2,3], py[1,2,3], gy[1,2,3]
        {
            Particle p = liquid.particles[k];
            p.cx = p.x - 1;
            p.cy = p.y - 1;
 
            x = -1;//p.cx - p.x;
            p.px[0] = (4 * x * x + 12 * x + 9);
            p.gx[0] = (x + 2)*8;
            x += 1;
            p.px[1] = (0 - x * x + 3)*2;
            p.gx[1] = (-2 * x)*8;
            x += 1;
            p.px[2] = (4 * x * x - 12 * x + 9);
            p.gx[2] = (x - 2)*8;
 
            y = -1;//p.cy - p.y;
            p.py[0] = (4 * y * y + 12 * y + 9);
            p.gy[0] = (y + 2)*8;
            y += 1;
            p.py[1] = (0 - y * y + 3)*2;
            p.gy[1] = (-2 * y)*8;
            y += 1;
            p.py[2] = (4 * y * y - 12 * y + 9);
            p.gy[2] = (y - 2)*8;
 
            for (int k1 = 0; k1 < 3; k1++)
            {
                for (int k2 = 0; k2 < 3; k2++)
                {
                    n = arraysValue(liquid.grid, p.cx + k1, p.cy + k2); 
                    if (n.active == FALSE)
                    {
                        liquid.active[activeNodeIndex] = n;
                        n.active = TRUE;
                        activeNodeIndex++;
                    }
                    phi = p.px[k1] * p.py[k2];
                    n.m += phi * p.mat.m;
                    n.d += phi;
                    n.gx += p.gx[k1] * p.py[k2];
                    n.gy += p.px[k1] * p.gy[k2];
                }
            }
        }
 
        int density;
		int pressure;
		int weight;
        Node n01;
        Node n02;
        Node n11;
        Node n12;
        int cx;
        int cy;
        int cxi;
        int cyi;
 
        int pdx;
        int pdy;
        int C20;
        int C02;
        int C30;
        int C03;
        int csum1;
        int csum2;
        int C21;
        int C31;
        int C12;
        int C13;
        int C11;
 
        int u;
        int u2;
        int u3;
        int v;
        int v2;
        int v3;
 
        for (int k3 = 0; k3 < particleLength; k3++)  
        {
            p = liquid.particles[k3];
 
            cx = p.x;
            cy = p.y;
            cxi = cx + 1;
            cyi = cy + 1;
 
            n01 = arraysValue(liquid.grid, cx, cy);
            n02 = arraysValue(liquid.grid, cx, cyi);
            n11 = arraysValue(liquid.grid, cxi, cy);
            n12 = arraysValue(liquid.grid, cxi, cyi);
 
            pdx = n11.d - n01.d;
            pdy = n02.d - n01.d;
            C20 = 3 * pdx - n11.gx - 2 * n01.gx;
            C02 = 3 * pdy - n02.gy - 2 * n01.gy;
            C30 = -2 * pdx + n11.gx + n01.gx;
            C03 = -2 * pdy + n02.gy + n01.gy;
            csum1 = n01.d + n01.gy + C02 + C03;
            csum2 = n01.d + n01.gx + C20 + C30;
            C21 = 3 * n12.d - 2 * n02.gx - n12.gx - 3 * csum1 - C20;
            C31 = -2 * n12.d + n02.gx + n12.gx + 2 * csum1 - C30;
            C12 = 3 * n12.d - 2 * n11.gy - n12.gy - 3 * csum2 - C02;
            C13 = -2 * n12.d + n11.gy + n12.gy + 2 * csum2 - C03;
            C11 = n02.gx - C13 - C12 - n01.gx;
 
            u = p.x - cx;
            u2 = u * u;
            u3 = u * u2;
            v = p.y - cy;
            v2 = v * v;
            v3 = v * v2;
            density = n01.d + n01.gx * u + n01.gy * v + C20 * u2 + C02 * v2 + C30 * u3 + C03 * v3 + C21 * u2 * v + C31 * u3 * v + C12 * u * v2 + C13 * u * v3 + C11 * u * v;
 
            pressure = density - 1;
            if (pressure > 2)
                pressure = 2;
 
            fx = 0;
            fy = 0;
 
            if (p.x < 4)
                fx += p.mat.m * (4 - p.x);
            else if (p.x > liquid.gsizeX - 5)
                fx += p.mat.m * (liquid.gsizeX - 5 - p.x);
 
            if (p.y < 4)
                fy += p.mat.m * (4 - p.y);
            else if (p.y > liquid.gsizeY - 5)
                fy += p.mat.m * (liquid.gsizeY - 5 - p.y);
 
            if (drag)//拖动
            {
                int vx = MathAbs(p.x -  liquid.mx/4);
                int vy = MathAbs(p.y -  liquid.my/4);
                if ((vx < 10) && (vy < 10))
                {
                    weight = p.mat.m * (1 - vx * 2) * (1 - vy * 2);
                    fx += weight * (mdx - p.u);
                    fy += weight * (mdy - p.v);
                }
            }
 
            for (i = 0; i < 3; i++)
            {
                for (j = 0; j < 3; j++)
                {
                    n = arraysValue(liquid.grid, (p.cx + i), (p.cy + j));
                    phi = p.px[i] * p.py[j];
                    n.ax += 0 - ((p.gx[i] * p.py[j]) * pressure) + fx * phi;
                    n.ay += 0 - ((p.px[i] * p.gy[j]) * pressure) + fy * phi;
                }
            }
        }
 		 
        for (i = 0; i < activeLength; i++)
        {
            n = liquid.active[i];
            if (n.m > 0)
            {
                n.ax /= n.m;
                n.ay /= n.m;
                n.ay += 1;//重力系数
            }
        }
 
        int mu;
        int mv;
        for (int k4 = 0; k4 < particleLength; k4++)  
        {
            p = liquid.particles[k4];
            for (i = 0; i < 3; i++)
            {
                for (j = 0; j < 3; j++)
                {
                    n = arraysValue(liquid.grid, (p.cx + i), (p.cy + j));
                    phi = p.px[i] * p.py[j];
                    p.u += phi * n.ax;
                    p.v += phi * n.ay;
                }
            }
            mu = p.mat.m * p.u;
            mv = p.mat.m * p.v;
            for (i = 0; i < 3; i++)
            {
                for (j = 0; j < 3; j++)
                {
                    n = arraysValue(liquid.grid, (p.cx + i), (p.cy + j));
                    phi = p.px[i] * p.py[j];
                    n.u += phi * mu;
                    n.v += phi * mv;
                }
            }
        }
 
        for (i = 0; i < activeLength; i++)//active Nodes 质量
        {
            n = liquid.active[i];
            if (n.m > 0)
            {
                n.u /= n.m;
                n.v /= n.m;
            }
        }
 
        int gu;
        int gv;
        int abt = 4 * 1024 * 1024;
        for (int k5 = 0; k5 < particleLength; k5++)  
        {
            p = liquid.particles[k5];
            gu = 0;
            gv = 0;
            for (i = 0; i < 3; i++)
            {
                for (j = 0; j < 3; j++)
                {
                    n = arraysValue(liquid.grid, (p.cx + i), (p.cy + j));//(周围node对粒子的影响)
                    phi = p.px[i] * p.py[j];
                    gu += phi * n.u;
                    gv += phi * n.v;
                }
            }
            p.x += gu;
            p.y += gv;
            p.u += 2 * (gu - p.u);
            p.v += 2 * (gv - p.v);
            
	       p.x = p.x / abt;
	       p.x += 400;
	       p.y = p.y / abt;
	       p.u = p.u / abt;
	       p.u += 400;
	       p.v = p.v / abt;
            if (p.x < 1)//越界检测
            {
                p.x = 2;
                p.u = 0;
            }
            else if (p.x > liquid.gsizeX - 2)
            {
                p.x = (liquid.gsizeX - 3);
                p.u = 0;
            }
            if (p.y < 1)
            {
                p.y = 2;
                p.v = 0;
            }
            else if (p.y > liquid.gsizeY - 2)
            {
                p.y = (liquid.gsizeY - 3);
                p.v = 0;
            }
        }
       
}
//二维数组
FUNCTION arraysValue(Nodes[] nodes, int x, int y) {
	Nodes n = nodes[x];
	return n.nodeArray[y];
}

 
 