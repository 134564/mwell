VERSION 3;
ID 0;
ATTRIBUTE 128;
NAME "ui_gui_slider";
DESCRIPTION "slider测试界面"; 

#include "../core/gui/guiInclude.h"

DATA
{
	GVMCanvasUnit vmCU;
	GContainer container;
	GSlider sliderTest;	
	GButton decButton;
	GButton incButton;
	GButton pluButton;
	GButton miuButton;
	GImageNumber imageNumber;
	ImageSet numberRes;
	ImageSet uiRes;
	ImageSet ui240Res;
}

FUNCTION init()
{
	ui240Res = Realize(ImageSet_Create("ui_res240.pip", TRUE));
    uiRes = Realize(ImageSet_Create("ui_res.pip", TRUE));
    numberRes = Realize(ImageSet_Create("number240.pip", TRUE));
	// 创建canvasUnit以及一个container.
	create_canvasUnit();
	
	// 创建一个label
	test_slider();

	sliderTest.func_handleKey = sliderHandleKey;					//处理slider事件
	GW_requestFocus(sliderTest);									//设置焦点
}

FUNCTION cycle()
{
}

FUNCTION cycleUI()
{
}

FUNCTION paint()
{
}

FUNCTION destroy()
{
	free vmCU;
	free container;
	free sliderTest;	
	free decButton;
	free incButton;
	free pluButton;
	free miuButton;
	free uiRes;
	free ui240Res;
	free imageNumber;
	free numberRes;
}

FUNCTION processPacket()
{

}

FUNCTION event()
{
}

FUNCTION create_canvasUnit()
{
	// 创建一个canvasUnit, 它是脚本界面的最基本组织形式, 每个界面window必须
	// 有一个canvasUnit.
	String cuName = Realize(Object_Create("Canvas_Unit"));
	vmCU = Realize(GVMCU_MakeGVMCU(NULL,cuName));
	// 创建一个container.
	String containerName = Realize(Object_Create("Container"));
	container = Realize(GC_makeGContainer(NULL,containerName));
	free cuName;
	free containerName;
	
	GW_setBound(vmCU, 0, 0, 240, 320);
	
	GW_setBound(container, 0, 0, 240, 320);
	GC_addChildWidget(vmCU, container, 0);
	
	container.backgroundColor = 0xe9daaf;			//设置container的背景色
	container.isBackgroundPainted = TRUE;
}

/*
 *slider继承container，可以添加几个控件，其中用LineLayout排列
 */
FUNCTION test_slider()
{
	String sliderName = Realize(Object_Create("sliderName"));						//slider的名字
	sliderTest = Realize(GSL_makeGSlider(NULL,sliderName, LAYOUT_ORIENT_HORIZON, LAYOUT_ALIGN_VMIDDLE, 4, 100, 0));
	//slider中的控件
	String  decButtonName = Realize(Object_Create("decButtonName"));				
	decButton = Realize(GBtn_makeGButton(NULL, decButtonName, decButtonName, ui240Res, 28,1));
	String incButtonName = Realize(Object_Create("incButtonName"));
	incButton = Realize(GBtn_makeGButton(NULL, incButtonName, NULL, ui240Res, 29,1));
	String pluButtonName = Realize(Object_Create("pluButtonName"));
	pluButton = Realize(GBtn_makeGButton(NULL, pluButtonName, NULL, uiRes, 21,1));
	String miuButtonName = Realize(Object_Create("pluButtonName"));
	miuButton = Realize(GBtn_makeGButton(NULL, miuButtonName, NULL, uiRes, 20,1));
	
	String imageNumberName = Realize(Object_Create("forceImageNumber"));
	String number = Realize(IntToStr(sliderTest.currentValue));
	imageNumber = Realize(GIN_makeGImageNumber(NULL,imageNumberName, numberRes, 120));
	GIN_setImageNumber(imageNumber, number);
	
	//imageNumber.isShowSign = FALSE;
	//imageNumber.plusStartIndex = 120;
	//imageNumber.subStartIndex = 129;
	
	free sliderName;	
	free decButtonName;																//释放分配的内存
	free incButtonName;
	free pluButtonName;
	free miuButtonName;
	free imageNumberName;
	free number;
	
	GC_addChildWidget(container, sliderTest, 0);									//将slider加入container
	GC_addChildWidget(sliderTest, decButton, 0);									//将子控件加入slider
	GC_addChildWidget(sliderTest, miuButton, 0);
	GC_addChildWidget(sliderTest, imageNumber, 0);
	GC_addChildWidget(sliderTest, pluButton, 0);
	GC_addChildWidget(sliderTest, incButton, 0);	
	
	sliderTest.backgroundColor = 0xffcb99;
	sliderTest.isBackgroundPainted = TRUE;
	
	
	GW_setBound(sliderTest, 50, 50, 80, 20);									    //设置slider的坐标宽高
	GW_setBound(decButton, 0, 0, 8, 12);
	GW_setBound(miuButton, 0, 0, 13, 13);
	GW_setBound(imageNumber, 0, 0, 18, 12);
	GW_setBound(pluButton, 0, 0, 13, 13);
	GW_setBound(incButton, 0, 0, 8, 12);
	decButton.btn_clicked = decBtnClicked;
	incButton.btn_clicked = incBtnClicked;
}

//响应slider按键事件
FUNCTION sliderHandleKey(GSlider this, int eventType, int keyCode, int modifierCode)
 {
 	boolean eventComsumed = FALSE;
 	
 	switch(eventType)
 	{
 		case EVENT_TYPE_KEYPRESSED:
 			break;
		case EVENT_TYPE_KEYRELEASED:
			// 定义okay和数字5键触发点击事件.
			switch(keyCode)
			{
				case LEFT_PRESSED:
					return decBtnClicked(decButton);
					break;
				case RIGHT_PRESSED:
					return incBtnClicked(incButton);
					break;
				
				//case KEY_CODE_OKAY:
				case SOFT_LAST_PRESSED:
					CloseUI();
					int textboxToMain = OpenUI("ui_gui_main");
					eventComsumed = TRUE;
					break;
				default:
					break;
			}
			break;
		default:
			break;
 	}
 	return eventComsumed;
 }

//左键使slider中imageNumber数字减少
FUNCTION decBtnClicked(GButton this)
{
	if(sliderTest.currentValue > sliderTest.minValue)
	{
		sliderTest.currentValue--;
		String number = Realize(IntToStr(sliderTest.currentValue));					//重新设置imageNumber显示值
		GIN_setImageNumber(imageNumber, number);
		imageNumber.absX = -1;
		imageNumber.absY = -1;
		free number;
	}	
	return TRUE;
}

//右键使slider中imageNumber数字增加
FUNCTION incBtnClicked(GButton this)
{	
	if(sliderTest.currentValue < sliderTest.maxValue)
	{
		sliderTest.currentValue++;
		String number = Realize(IntToStr(sliderTest.currentValue));					//重新设置imageNumber显示值
		GIN_setImageNumber(imageNumber, number);
		imageNumber.absX = -1;
		imageNumber.absY = -1;
		free number;
	}	
	return TRUE;
}
