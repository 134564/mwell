VERSION 3;
ID 0;
ATTRIBUTE 128;
NAME "ui_gui_label";
DESCRIPTION "label测试界面"; 

#include "../core/gui/guiInclude.h"

DATA
{
	GVMCanvasUnit vmCU;
	GContainer container;
	GLabel label;
}

FUNCTION init()
{
	// 创建canvasUnit以及一个container.
	create_canvasUnit();
	
	// 创建一个label
	test_label();
}

FUNCTION cycle()
{
}

FUNCTION cycleUI()
{
}

FUNCTION paint()
{
}

FUNCTION destroy()
{
	free vmCU;
	free container;
	free label;
}

FUNCTION processPacket()
{
	return FALSE;
}

FUNCTION event()
{
}

FUNCTION create_canvasUnit()
{
	// 创建一个canvasUnit, 它是脚本界面的最基本组织形式, 每个界面window必须
	// 有一个canvasUnit.
	String cuName = Realize(Object_Create("Canvas_Unit"));
	vmCU = Realize(GVMCU_MakeGVMCU(NULL,cuName));
	// 创建一个container.
	String containerName = Realize(Object_Create("Container"));
	container = Realize(GC_makeGContainer(NULL,containerName));
	free cuName;
	free containerName;
	
	GW_setBound(vmCU, 0, 0, 240, 320);

	//container.borderColor = 0xff0000;
	//container.isBackgroundPainted = TRUE;
	//container.isBorderPainted = TRUE;
	//GW_setBorderSize(container, 2, 2, 2, 2);
	//GW_setInsetSize(container, 2, 2, 2, 2);
	
	GW_setBound(container, 0, 0, 240, 320);
	GC_addChildWidget(vmCU, container, 0);
	
	container.backgroundColor = 0xe9daaf;			//设置container的背景色
	container.isBackgroundPainted = TRUE;
}

/*
 *label可以显示一个简单文字，不显示图片，没有文字时画X
 */
FUNCTION test_label()
{
	String labelName = Realize(Object_Create("iconName"));					//label的名字
	String caption = Realize(Object_Create("This is a label! I want to test it!"));			//label显示的文字
	label = Realize(GL_makeGLabel(NULL,labelName, caption));					//创建label
	label.is3D = TRUE;
	label.isBackgroundPainted = TRUE;
	label.backgroundColor = 0xffffffff;
	label.textInsetColor = 0xffff00;
	//label.textBorderColor = 0x75ffffff;
	label.isFly = TRUE;
	label.vAlignment = LAYOUT_ALIGN_VMIDDLE;
//	label.vAlignment = LAYOUT_ALIGN_VTOP;

	label.hAlignment = LAYOUT_ALIGN_HLEFT;
//	label.hAlignment = LAYOUT_ALIGN_HCENTER;

	label._flyStrInfo = Realize(new FlyStrInfo);
	label._flyStrInfo.flyOrientation = FLYSTR_ORIENT_HSHOCK;
	label._flyStrInfo.flyStrDistance = 5;
	label._flyStrInfo.flyStrTick = 1;
	label._flyStrInfo.flyRect_x = 0;
	label._flyStrInfo.flyRect_y = 0;
	label._flyStrInfo.flyRect_w = 100;
	label._flyStrInfo.flyRect_h = label.h;
	free labelName;	
	free caption;														//释放分配的内存
	
	GC_addChildWidget(container, label, 0);									//将label加入container
	//GW_setBound(label, 50, 50, 110, 50);									//设置label的坐标宽高
	
//	label.borderColor = 0xff0000;											//设置label边框
//	label.isBorderPainted = TRUE;
//	GW_setBorderSize(label, 2, 2, 2, 2);
//	GW_setInsetSize(label, 2, 2, 2, 2);
	GW_setBound(label, 70, 50, 100, label.h);
}



